<snippet>
    <content><![CDATA[
template <typename T>
struct SegTree {
    int n;                // size of the array
    std::vector<T> t;     // segment tree array
    T neutral;            // neutral element for the operation
    std::function<T(T, T)> op;  // commutative binary operation

    SegTree(int size, T neutral_elem, std::function<T(T, T)> operation)
        : n(size), t(2 * size, neutral_elem), neutral(neutral_elem), op(operation) {}

    void build() {  // build the tree
        for (int i = n - 1; i > 0; --i) 
            t[i] = op(t[i<<1], t[i<<1|1]);
    }

    void modify(int p, T value) {  // set value at position p
        for (t[p += n] = value; p > 1; p >>= 1) 
            t[p>>1] = op(t[p], t[p^1]);
    }

    T query(int l, int r) {  // query the operation result on the interval [l, r]
        T res = neutral;
        for (l += n, r += n + 1; l < r; l >>= 1, r >>= 1) {
            if (l&1) res = op(res, t[l++]);
            if (r&1) res = op(res, t[--r]);
        }
        return res;
    }
};
$0
    ]]></content>
    <tabTrigger>segtree</tabTrigger>
    <description>"struct supporting segment tree with arbitrary operator"</description>
</snippet>